#
# This file is part of the xPack project (http://xpack.github.io).
# Copyright (c) 2021 Liviu Ionescu
#
# This Source Code File is subject to the MIT License terms.
# If a copy of the license was not distributed with this file, it can
# be obtained from https://opensource.org/licenses/MIT/.
#
# -----------------------------------------------------------------------------

# https://cmake.org/cmake/help/v3.19/
cmake_minimum_required(VERSION 3.19)

message(STATUS "CMake version: ${CMAKE_VERSION}")

if(CMAKE_BINARY_DIR STREQUAL CMAKE_SOURCE_DIR)
  message(FATAL_ERROR "In-source builds are not supported. Please use separate folder for build.")
endif()

# -----------------------------------------------------------------------------

enable_language(C)
enable_language(CXX)
enable_language(ASM)

# Specify the C/C++ standards.
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS ON)

set(CMAKE_CXX_STANDARD 17) # 11, 13, 17, 20
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS ON)

message(STATUS "Compiler: ${CMAKE_C_COMPILER_ID} ${CMAKE_C_COMPILER_VERSION}")

# Generate the compile_commands.json file to feed the indexer.
# It is recommended to be passed on the command line to make it very clear
# that it is mandatory, but can also be passed here, for just in case.
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# -----------------------------------------------------------------------------

get_filename_component(xpack_project_folder ${CMAKE_SOURCE_DIR} DIRECTORY)

# -----------------------------------------------------------------------------

message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "Project path: ${xpack_project_folder}")
# message(STATUS "Prefix path: ${CMAKE_PREFIX_PATH}")
message(STATUS "PATH: $ENV{PATH}")

# -----------------------------------------------------------------------------

project(
	hello-world
	DESCRIPTION "A simple Hello World application"
)

# -----------------------------------------------------------------------------

# Preprocessor definitions.
add_compile_definitions(
  $<$<STREQUAL:"${CMAKE_BUILD_TYPE}","Debug">:DEBUG>

  # Enable this if not already defined by the toolchain.
  # $<$<NOT:$<STREQUAL:"${CMAKE_BUILD_TYPE}","Debug">>:NDEBUG>
)

# Options passed to the compilers and linker.
set(common_options 

  $<$<C_COMPILER_ID:GNU,Clang,AppleClang>:-fmessage-length=0>
  $<$<C_COMPILER_ID:GNU,Clang,AppleClang>:-fsigned-char>

  $<$<C_COMPILER_ID:GNU,Clang,AppleClang>:-ffunction-sections>
  $<$<C_COMPILER_ID:GNU,Clang,AppleClang>:-fdata-sections>
)

add_compile_options(

  ${common_options}
)

add_link_options(

  ${common_cpu_options}

  $<$<C_COMPILER_ID:GNU>:-Wl,--gc-sections>
  $<$<C_COMPILER_ID:Clang,AppleClang>:-Wl,-dead_strip>
)

# -----------------------------------------------------------------------------
# Create the application.

add_executable(application)
message(STATUS "==> application")

set_target_properties(
  application

  PROPERTIES
    OUTPUT_NAME "${CMAKE_PROJECT_NAME}"
)

# Application sources.
target_sources(
  application

  PRIVATE
    ${xpack_project_folder}/src/hello-world.{{ fileExtension }}
)

# Application includes.
target_include_directories(
  application

  PRIVATE
    ${xpack_project_folder}/include
)

# -----------------------------------------------------------------------------
